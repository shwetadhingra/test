<?xml version="1.0" encoding="UTF-8"?>
<!--
	Application context definition for PetClinic on JPA.
-->
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop"
		xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
		xmlns:jdbc="http://www.springframework.org/schema/jdbc"
		xmlns:util="http://www.springframework.org/schema/util"
		xsi:schemaLocation="
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
			http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
			http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

	<!-- ========================= RESOURCE DEFINITIONS ========================= -->

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<context:property-placeholder location="jdbc-test.properties"/>

	<!-- DataSource configuration for Apache Commons DBCP. -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
			p:driverClassName="${jdbc.driverClassName}" p:url="${jdbc.url}"
			p:username="${jdbc.username}" p:password="${jdbc.password}"
			p:testWhileIdle="true" p:validationQuery="${jdbc.validationQuery}"
			p:timeBetweenEvictionRunsMillis="60000"/>
	
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="${jdbc.initLocation}"/>
	</jdbc:initialize-database>
 	
	<!--
		Activates a load-time weaver for the context. Any bean within the context that
		implements LoadTimeWeaverAware (such as LocalContainerEntityManagerFactoryBean)
		will receive a reference to the autodetected load-time weaver.
	-->
	<!-- 
	<context:load-time-weaver/>
	 -->

	<!-- JPA EntityManagerFactory -->
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
			p:dataSource-ref="dataSource">
		<property name="persistenceUnitName" value="com.palm.cloud.services.cmdb.test"/>
		<property name="loadTimeWeaver">
			<bean class="org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver" />
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"
					p:database="${jpa.database}" p:showSql="${jpa.showSql}"/>
		</property>
		<property name="jpaProperties" ref="jpaProperties"/>
		<property name="persistenceXmlLocation" value="classpath:META-INF/persistence.xml"/>
	</bean>

	<util:properties id="jpaProperties">
		<prop key="hibernate.generate_statistics">${hibernate.generate_statistics}</prop>
		<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
		<prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
	</util:properties>

	<!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"
			p:entityManagerFactory-ref="entityManagerFactory"/>


	<!-- ========================= BUSINESS OBJECT DEFINITIONS ========================= -->

	<!--
		Activates various annotations to be detected in bean classes: Spring's
		@Required and @Autowired, as well as JSR 250's @PostConstruct,
		@PreDestroy and @Resource (if available) and JPA's @PersistenceContext
		and @PersistenceUnit (if available).
	-->
	<context:annotation-config/>
	
	<context:spring-configured/>

	<context:component-scan base-package="com.palm.cloud.services.cmdb"/>

	<!--
		Instruct Spring to perform declarative transaction management
		automatically on annotated classes.
		
		for mode="aspectj"/ see SPR-6392
	-->
	<tx:annotation-driven/>

	<!--
		Post-processor to perform exception translation on @Repository classes (from native
		exceptions such as JPA PersistenceExceptions to Spring's DataAccessException hierarchy).
	-->
	<bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/>

	<!--
		Will automatically be transactional due to @Transactional.
		EntityManager will be auto-injected due to @PersistenceContext.
		PersistenceExceptions will be auto-translated due to @Repository.
	-->
	<!-- DAO -->
	<bean id="objectDAO" class="com.palm.cloud.services.cmdb.dao.ObjectDAOImpl"/>
	<bean id="objectAttributeDAO" class="com.palm.cloud.services.cmdb.dao.ObjectAttributeDAOImpl"/>
	<bean id="relationshipDAO" class="com.palm.cloud.services.cmdb.dao.RelationshipDAOImpl"/>
	<bean id="relationshipAttributeDAO" class="com.palm.cloud.services.cmdb.dao.RelationshipAttributeDAOImpl"/>
	<bean id="metaClassDAO" class="com.palm.cloud.services.cmdb.dao.MetaClassDAOImpl"/>
	<bean id="metaAttributeDAO" class="com.palm.cloud.services.cmdb.dao.MetaAttributeDAOImpl"/>
	<bean id="metaClassRelationshipDAO" class="com.palm.cloud.services.cmdb.dao.MetaClassRelationshipDAOImpl"/>
	<bean id="metaStatusDAO" class="com.palm.cloud.services.cmdb.dao.MetaStatusDAOImpl"/>

	<!-- Service -->
	<bean id="cmdbMetaService" class="com.palm.cloud.services.cmdb.service.CMDBMetaServiceImpl"/>
	<bean id="cmdbDataService" class="com.palm.cloud.services.cmdb.service.CMDBDataServiceImpl"/>
	<bean id="collectionService" class="com.palm.cloud.services.cmdb.collection.CollectionServiceImpl"/>
</beans>